// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String         @default("USER")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  JournalEntry  JournalEntry[]
  Goal          Goal[]
  MoodEntry     MoodEntry[]
  UserResource  UserResource[]
  ChatSession   ChatSession[]


  following     Follows[]      @relation("following")
  followers     Follows[]      @relation("followers")
  spaces        Space[]
  spaceHistory  SpaceParticipant[]
  ratings       Rating[]

  // Social Profile Fields
  location      String?
  website       String?
  birthDate     DateTime?
  bio           String?
  backgroundImage String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.Text
  mood      String?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?   @db.Text
  targetDate  DateTime?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  mood      Int // 1-10 scale
  notes     String?  @db.Text
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  url          String
  type         String // article, video, podcast, etc.
  tags         String[]
  isPremium    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserResource UserResource[]
}

model UserResource {
  id         String   @id @default(cuid())
  userId     String
  resourceId String
  savedAt    DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
}

model ChatSession {
  id        String        @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  content     String      @db.Text
  role        String // 'user' or 'assistant'
  createdAt   DateTime    @default(now())
  chatSession ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

// Social Space Models

model Space {
  id           String             @id @default(cuid())
  name         String
  roomName     String             @unique
  creatorId    String
  creator      User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  participants SpaceParticipant[]
  ratings      Rating[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model SpaceParticipant {
  id        String   @id @default(cuid())
  userId    String
  spaceId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  joinedAt  DateTime @default(now())

  @@unique([userId, spaceId])
}

model Rating {
  id      String @id @default(cuid())
  score   Int
  userId  String
  spaceId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([userId, spaceId])
}

model Follows {
  followerId String
  followingId String

  follower  User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}
